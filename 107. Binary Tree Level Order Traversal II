Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],

Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:


[
  [15,7],
  [9,20],
  [3]
]


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root == null)  return result;
        List<TreeNode> nodeList = new ArrayList<TreeNode>();
        nodeList.add(root);
        List<Integer> rootNumList = new ArrayList<Integer>();
        rootNumList.add(root.val);
        result.add(rootNumList);
        
        while(nodeList.size()>0){
            List<TreeNode> newNodeList = new ArrayList<TreeNode>();
            List<Integer> numList = new ArrayList<Integer>();
            for(TreeNode node:nodeList){
                if(node.left!=null){
                    newNodeList.add(node.left);
                    numList.add(node.left.val);
                }
                if(node.right!=null){
                    newNodeList.add(node.right);
                    numList.add(node.right.val);
                }
            }
            nodeList.clear();
            nodeList.addAll(newNodeList);
            result.add(0,numList);
        }
        result.remove(0);
        return result;
        
    }
}