Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null) return true;
        if(Math.abs(maxDepth(root.left) - maxDepth(root.right)) <= 1){
            return isBalanced(root.left)&&isBalanced(root.right);
        }else{
            return false;
        }
      
    }
    
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;
        if(root.left ==null && root.right !=null) return  maxDepth(root.right) +1;
        if(root.left !=null && root.right == null) return maxDepth(root.left) +1;
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);
        return leftDepth >rightDepth ? leftDepth+1:rightDepth+1;
    }
}