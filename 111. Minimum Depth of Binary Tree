Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int minDepth(TreeNode root) {
        int minDepth = 0;
        if(root == null) return minDepth;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int levelNum = queue.size();
            minDepth++;
            for(int i=0; i<levelNum; i++) {
                // if(queue.peek().left != null) queue.offer(queue.peek().left);
                // if(queue.peek().right != null) queue.offer(queue.peek().right);
                // subList.add(queue.poll().val);
                if(queue.peek().left == null && queue.peek().right == null) return minDepth;
                if(queue.peek().left != null)  queue.offer(queue.peek().left);
               
                if(queue.peek().right!=null) queue.offer(queue.peek().right);
                queue.poll();
            }
        }
        return minDepth;
    }
}