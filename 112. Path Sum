Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

For example:
Given the below binary tree and sum = 22,


              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1

return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
       if(root == null) return false;
       int count = 0;
       Stack<TreeNode> stack = new Stack<TreeNode>();
       TreeNode last = new TreeNode(0);
       TreeNode tp = new TreeNode(0);
       while(root!=null||!stack.isEmpty()){
           if(root!=null){
              stack.push(root);
              count+=root.val;
              root= root.left;
           }else{
                tp = stack.peek();
                if(tp.right!=null && tp.right!=last){
                    root=tp.right;
                }else{
                    if(tp.left == null && tp.right == null){
                        if(count == sum) return true;
                    }
                    
                    last = stack.pop();
                    count-=last.val;
                }
           }
       }
       
       return false;
    }
}