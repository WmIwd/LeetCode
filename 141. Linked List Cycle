Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast = new ListNode(0);
        ListNode slow = new ListNode(0);
        slow.next = head;
        fast.next = head;
        while(fast.next!=null&&slow.next!=null&&fast.next.next!=null){
        	fast.next = fast.next.next;	
        	if(fast.next == slow.next) return true;
        	slow.next = slow.next.next;
			fast.next = fast.next.next;
			if(fast.next == slow.next) return true;	
        }

        return false;
    }
}