Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.


public class MinStack {
	List<Integer> list;
	int min;
	int index;
    /** initialize your data structure here. */
    public MinStack() {
       list = new ArrayList<Integer>();
       min = 0;
       index = 0;
    }
    
    public void push(int x) {
        if(list.size() == 0||x< min){
        	min = x;
        	index = list.size();
        }
        list.add(x);
    }
    
    public void pop() {
        if(index == list.size()-1){
        	min = list.get(0);
        	index = 0;
        	for(int i=1;i<list.size()-1;i++){
        		if(list.get(i)<min){
        			min = list.get(i);
        			index = i;
        		}
        	}
        }
       	list.remove(list.size()-1);
    }
    
    public int top() {
        return list.get(list.size()- 1);
    }
    
    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */