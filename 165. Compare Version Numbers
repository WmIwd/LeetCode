Compare two version numbers version1 and version2.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 13.37



public class Solution {
    public int compareVersion(String version1, String version2) {
        String[] v1s = version1.split("\\.");
        List<String> v1 = new ArrayList<String>();
        for(int i = 0;i<v1s.length;i++){
            v1.add(v1s[i]);
        }
        String[] v2s = version2.split("\\.");
        List<String> v2 = new ArrayList<String>();
        for(int i = 0;i<v2s.length;i++){
            v2.add(v2s[i]);
        }
        int last1 = v1.size() - 1;
        while(last1>=0&&isAllZero(v1.get(last1))){
            last1--;
        }
        
        int last2 = v2.size() - 1;
        while(last2>=0&&isAllZero(v2.get(last2))){
            last2--;
        }
        
        int v1Length = last1+1;
        int v2Length = last2+1;
        
        int result = 0;
        for(int i = 0;i<v1Length;i++){
            if(i== v2Length) return 1;
            String s1 = v1.get(i);
            String s2 = v2.get(i);
            result = compareString(s1,s2);
            if(result>0){
                return 1;
            }else if(result <0){
                return -1;
            }else{
                if(i == v1Length -1 && i == v2Length -1) return 0;
            }
        }
        
        return -1;
    }
    
    private boolean isAllZero(String s){
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)!='0') return false;
        }
        
        return true;
    }
    
    private int compareString(String s1,String s2){
        while(s1.startsWith("0")){
            s1 = s1.substring(1, s1.length());
        }
        
        while(s2.startsWith("0")){
            s2 = s2.substring(1, s2.length());
        }
        
        if(s1.length()>s2.length()){
            return 1;
        }else if(s1.length()<s2.length()){
            return -1;
        }else{
            int result = s1.compareTo(s2);
            if(result > 0) return 1;
            if(result < 0) return -1;
            return 0;
        }
    }
}