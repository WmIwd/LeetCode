You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode n1 = l1;
        ListNode n2 = l2;
        ListNode last = null;
        ListNode res = null;
        boolean carry = false;
        while(n1!=null||n2!=null){
            int val = 0;
            if(n1==null){
                val = carry? n2.val+1:n2.val;
            }else if(n2 == null){
                val = carry? n1.val+1:n1.val;
            }else{
                val = carry? n1.val+n2.val+1:n1.val+n2.val;  
            }
            carry = val>=10?true:false;
            ListNode newNode = new ListNode(val%10);
            if(last == null) {
                res = newNode;
            }else{
                last.next = newNode; 
            }
            last = newNode;
            if(n1!=null) n1 = n1.next;
            if(n2!=null) n2 = n2.next;
        }
        
        if(carry){
            ListNode newNode = new ListNode(1);
            last.next = newNode;
        }
        
        return res;
    }
}