Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode h = new ListNode(0);
        h.next = head;
        ListNode a = new ListNode(0);
        a.next = h;
        ListNode b = new ListNode(0);
        b.next = head;
        while(b.next!=null && b.next.next!=null){
        	a.next.next = b.next.next;
        	a.next = b.next.next;
        	b.next.next = a.next.next;
        	a.next.next = b.next;
        	a.next = b.next;
        	b.next = b.next.next;
        }

        return h.next;
    }
}