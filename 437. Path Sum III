You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    private int count = 0;
    public int pathSum(TreeNode root, int sum) {
        if(root ==null) return count;
        List list = new ArrayList<Integer>();
        dfs(root,list,sum);
        return count;
    }
    
    private void dfs(TreeNode node,List<Integer> list,int sum){
        List<Integer> newList = new ArrayList<Integer>();
        newList.addAll(list);
    	if(node.val == sum) count++;
        newList.add(node.val);
   
        for(int i=0;i<newList.size()-1;i++){
            if(newList.get(i)+node.val == sum) count++;
            newList.set(i,newList.get(i)+node.val);
        }
        
        if(node.left ==null&&node.right ==null){
            return;
        }

    	if(node.left !=null){
    	    dfs(node.left,newList,sum);
    	}

    	if(node.right!=null){
    	    dfs(node.right,newList,sum);
    	}
    }
}