Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


public class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> list = new ArrayList<Integer>();
        if(p.length()>s.length()) return list;
        int[] sArray = new int[26];
        int[] pArray = new int[26];
        for(int i=0;i<p.length();i++){
        	sArray[s.charAt(i)-'a']++;
        	pArray[p.charAt(i)-'a']++;
        }
        boolean isEquals = false;
       	if(isEquals(sArray,pArray)) {
       		list.add(0);
       		isEquals = true;
       	}
        int left = 0;
        int right = p.length();
        while(right<s.length()){
        	char leftC = s.charAt(left);
        	char rightC = s.charAt(right);
        	if(isEquals){
        		if(leftC == rightC){
        			list.add(left+1);
        			isEquals = true;
        		}else{
        			sArray[leftC-'a']--;
        			sArray[rightC-'a']++;
        			isEquals = false;
        		}
        	}else{
        		if(leftC == rightC){
        			isEquals = false;
        		}else{
        			sArray[leftC-'a']--;
        			sArray[rightC-'a']++;
        			if(isEquals(sArray,pArray)){
        				isEquals = true;
        				list.add(left+1);
        			}else{
        				isEquals = false;
        			}
        		}
        	}

        	left++;
        	right++;
        }
        return list;

    }

    private boolean isEquals(int[] a,int[] b){
    	for(int i = 0;i<26;i++){
    		if(a[i]!=b[i]) return false;  
    	}

    	return true;
    }
}